{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Card, Stack, TextStyle } from '@shopify/polaris';\nconst CREATE_SCRIPT_TAG = gql`\n    mutation scriptTagCreate($input: ScriptTagInput!) {\n        scriptTagCreate(input: $input) {\n            scriptTag {\n                id\n            }\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\nconst QUERY_SCRIPTTAGS = gql`\n    query {\n        scriptTags(first: 5) {\n            edges {\n                node {\n                    id\n                    src\n                    displayScope\n                }\n            }\n        }\n    }\n`;\nconst DELETE_SCRIPTTAG = gql`\n    mutation scriptTagDelete($id: ID!) {\n        scriptTagDelete(id: $id) {\n            deletedScriptTagId\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\n\nfunction ScriptPage() {\n  const [createScripts] = useMutation(CREATE_SCRIPT_TAG);\n  const [deleteScripts] = useMutation(DELETE_SCRIPTTAG);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(QUERY_SCRIPTTAGS);\n  if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n  if (error) return __jsx(\"div\", null, error.message);\n  return __jsx(Card, null, __jsx(\"h1\", null, \"These are the script tags right now:\"), __jsx(\"button\", {\n    type: \"submit\",\n    onClick: () => {\n      createScripts({\n        variables: {\n          input: {\n            src: \"https://ad8de5a8.ngrok.io/test-script.js\",\n            displayScope: \"ALL\"\n          }\n        },\n        refetchQueries: [{\n          query: QUERY_SCRIPTTAGS\n        }]\n      });\n    }\n  }, \"Create Script Tag\"), data.scriptTags.edges.map(item => {\n    return __jsx(Stack, {\n      key: item.node.id\n    }, __jsx(Stack.Item, null, __jsx(\"p\", null, __jsx(TextStyle, null, item.node.id))), __jsx(Stack.Item, null, __jsx(\"button\", {\n      type: \"submit\",\n      onClick: () => {\n        deleteScripts({\n          variables: {\n            id: item.node.id\n          },\n          refetchQueries: [{\n            query: QUERY_SCRIPTTAGS\n          }]\n        });\n      }\n    }, \"Delete Script Tag\")));\n  }));\n}\n\nexport default ScriptPage;","map":{"version":3,"sources":["/Users/iskandarkurbanov/Desktop/script-tag-app/pages/script-page.js"],"names":["gql","useQuery","useMutation","Card","Stack","TextStyle","CREATE_SCRIPT_TAG","QUERY_SCRIPTTAGS","DELETE_SCRIPTTAG","ScriptPage","createScripts","deleteScripts","loading","error","data","message","variables","input","src","displayScope","refetchQueries","query","scriptTags","edges","map","item","node","id"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,SAAtB,QAAuC,kBAAvC;AAGA,MAAMC,iBAAiB,GAAGN,GAAI;;;;;;;;;;;;CAA9B;AAcA,MAAMO,gBAAgB,GAAGP,GAAI;;;;;;;;;;;;CAA7B;AAcA,MAAMQ,gBAAgB,GAAGR,GAAI;;;;;;;;;;CAA7B;;AAaA,SAASS,UAAT,GAAsB;AAElB,QAAM,CAACC,aAAD,IAAkBR,WAAW,CAACI,iBAAD,CAAnC;AACA,QAAM,CAACK,aAAD,IAAkBT,WAAW,CAACM,gBAAD,CAAnC;AACA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2Bb,QAAQ,CAACM,gBAAD,CAAzC;AAGA,MAAIK,OAAJ,EAAa,OAAO,mCAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACE,OAAZ,CAAP;AAEX,SACI,MAAC,IAAD,QACI,yDADJ,EAEI;AACI,IAAA,IAAI,EAAC,QADT;AACkB,IAAA,OAAO,EAAE,MAAM;AACzBL,MAAAA,aAAa,CAAC;AACVM,QAAAA,SAAS,EAAE;AACPC,UAAAA,KAAK,EAAE;AACHC,YAAAA,GAAG,EAAE,0CADF;AAEHC,YAAAA,YAAY,EAAE;AAFX;AADA,SADD;AAOVC,QAAAA,cAAc,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAEd;AAAT,SAAD;AAPN,OAAD,CAAb;AASH;AAXL,yBAFJ,EAkBKO,IAAI,CAACQ,UAAL,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0BC,IAAI,IAAI;AAE/B,WACI,MAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,IAAI,CAACC,IAAL,CAAUC;AAAtB,OACI,MAAC,KAAD,CAAO,IAAP,QACA,iBAAG,MAAC,SAAD,QAAYF,IAAI,CAACC,IAAL,CAAUC,EAAtB,CAAH,CADA,CADJ,EAII,MAAC,KAAD,CAAO,IAAP,QACA;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,MAAM;AACjChB,QAAAA,aAAa,CAAC;AACVK,UAAAA,SAAS,EAAE;AACPW,YAAAA,EAAE,EAAEF,IAAI,CAACC,IAAL,CAAUC;AADP,WADD;AAIVP,UAAAA,cAAc,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAEd;AAAT,WAAD;AAJN,SAAD,CAAb;AAMH;AAPD,2BADA,CAJJ,CADJ;AAmBH,GArBA,CAlBL,CADJ;AA2CH;;AAED,eAAeE,UAAf","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Card, Stack, TextStyle } from '@shopify/polaris';\n\n\nconst CREATE_SCRIPT_TAG = gql`\n    mutation scriptTagCreate($input: ScriptTagInput!) {\n        scriptTagCreate(input: $input) {\n            scriptTag {\n                id\n            }\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\n\nconst QUERY_SCRIPTTAGS = gql`\n    query {\n        scriptTags(first: 5) {\n            edges {\n                node {\n                    id\n                    src\n                    displayScope\n                }\n            }\n        }\n    }\n`;\n\nconst DELETE_SCRIPTTAG = gql`\n    mutation scriptTagDelete($id: ID!) {\n        scriptTagDelete(id: $id) {\n            deletedScriptTagId\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\n\n\nfunction ScriptPage() {\n\n    const [createScripts] = useMutation(CREATE_SCRIPT_TAG);\n    const [deleteScripts] = useMutation(DELETE_SCRIPTTAG);\n    const { loading, error, data } = useQuery(QUERY_SCRIPTTAGS);\n\n\n    if (loading) return <div>Loadingâ€¦</div>;\n    if (error) return <div>{error.message}</div>;\n\n    return (\n        <Card>\n            <h1>These are the script tags right now:</h1>\n            <button\n                type='submit' onClick={() => {\n                    createScripts({\n                        variables: {\n                            input: {\n                                src: \"https://ad8de5a8.ngrok.io/test-script.js\",\n                                displayScope: \"ALL\"\n                            }\n                        },\n                        refetchQueries: [{ query: QUERY_SCRIPTTAGS }]\n                    })\n                }}\n            >\n                Create Script Tag\n            </button>\n\n            {data.scriptTags.edges.map(item => {\n\n                return (\n                    <Stack key={item.node.id}>\n                        <Stack.Item>\n                        <p><TextStyle>{item.node.id}</TextStyle></p>\n                        </Stack.Item>\n                        <Stack.Item>\n                        <button type='submit' onClick={() => {\n                            deleteScripts({\n                                variables: {\n                                    id: item.node.id\n                                },\n                                refetchQueries: [{ query: QUERY_SCRIPTTAGS }]\n                            })\n                        }}>\n                            Delete Script Tag\n                        </button>\n                        </Stack.Item>\n                    </Stack>\n                )\n            })}\n        </Card>\n    )\n}\n\nexport default ScriptPage;\n"]},"metadata":{},"sourceType":"module"}