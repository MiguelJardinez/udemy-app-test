{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation scriptTagDelete($id: ID!) {\\n        scriptTagDelete(id: $id) {\\n            deletedScriptTagId\\n            userErrors {\\n                field\\n                message\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n        scriptTags(first: 5) {\\n            edges {\\n                node {\\n                    id\\n                    src\\n                    displayScope\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation scriptTagCreate($input: ScriptTagInput!) {\\n        scriptTagCreate(input: $input) {\\n            scriptTag {\\n                id\\n            }\\n            userErrors {\\n                field\\n                message\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Card, Stack } from '@shopify/polaris';\nvar CREATE_SCRIPT_TAG = gql(_templateObject());\nvar QUERY_SCRIPTTAGS = gql(_templateObject2());\nvar DELETE_SCRIPTTAG = gql(_templateObject3());\n\nfunction ScriptPage() {\n  var _useMutation = useMutation(CREATE_SCRIPT_TAG),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createScripts = _useMutation2[0];\n\n  var _useMutation3 = useMutation(DELETE_SCRIPTTAG),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      deleteScripts = _useMutation4[0];\n\n  var _useQuery = useQuery(QUERY_SCRIPTTAGS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n  if (error) return __jsx(\"div\", null, error.message);\n  console.log('this is script data', data);\n  return __jsx(Card, null, __jsx(\"h1\", null, \"These are the script tags right now:\"), __jsx(\"button\", {\n    type: \"submit\",\n    onClick: function onClick() {\n      createScripts({\n        variables: {\n          input: {\n            src: \"https://ad8de5a8.ngrok.io/test-script.js\",\n            displayScope: \"ALL\"\n          }\n        },\n        refetchQueries: [{\n          query: QUERY_SCRIPTTAGS\n        }]\n      });\n    }\n  }, \"Create Script Tag\"), data.scriptTags.edges.map(function (item) {\n    return __jsx(Stack, {\n      key: item.node.id\n    }, __jsx(Stack.Item, null, __jsx(\"p\", null, item.node.id)), __jsx(Stack.Item, null, __jsx(\"button\", {\n      type: \"submit\",\n      onClick: function onClick() {\n        deleteScripts({\n          variables: {\n            id: item.node.id\n          },\n          refetchQueries: [{\n            query: QUERY_SCRIPTTAGS\n          }]\n        });\n      }\n    }, \"Delete Script Tag\")));\n  }));\n}\n\nexport default ScriptPage;","map":{"version":3,"sources":["/Users/iskandarkurbanov/Desktop/script-tag-app/pages/script-page.js"],"names":["gql","useQuery","useMutation","Card","Stack","CREATE_SCRIPT_TAG","QUERY_SCRIPTTAGS","DELETE_SCRIPTTAG","ScriptPage","createScripts","deleteScripts","loading","error","data","message","console","log","variables","input","src","displayScope","refetchQueries","query","scriptTags","edges","map","item","node","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;AAGA,IAAMC,iBAAiB,GAAGL,GAAH,mBAAvB;AAcA,IAAMM,gBAAgB,GAAGN,GAAH,oBAAtB;AAcA,IAAMO,gBAAgB,GAAGP,GAAH,oBAAtB;;AAaA,SAASQ,UAAT,GAAsB;AAAA,qBAEMN,WAAW,CAACG,iBAAD,CAFjB;AAAA;AAAA,MAEXI,aAFW;;AAAA,sBAGMP,WAAW,CAACK,gBAAD,CAHjB;AAAA;AAAA,MAGXG,aAHW;;AAAA,kBAIeT,QAAQ,CAACK,gBAAD,CAJvB;AAAA,MAIVK,OAJU,aAIVA,OAJU;AAAA,MAIDC,KAJC,aAIDA,KAJC;AAAA,MAIMC,IAJN,aAIMA,IAJN;;AAOlB,MAAIF,OAAJ,EAAa,OAAO,mCAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACE,OAAZ,CAAP;AAEXC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,IAAnC;AAEA,SACI,MAAC,IAAD,QACI,yDADJ,EAEI;AACI,IAAA,IAAI,EAAC,QADT;AACkB,IAAA,OAAO,EAAE,mBAAM;AACzBJ,MAAAA,aAAa,CAAC;AACVQ,QAAAA,SAAS,EAAE;AACPC,UAAAA,KAAK,EAAE;AACHC,YAAAA,GAAG,EAAE,0CADF;AAEHC,YAAAA,YAAY,EAAE;AAFX;AADA,SADD;AAOVC,QAAAA,cAAc,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAEhB;AAAT,SAAD;AAPN,OAAD,CAAb;AASH;AAXL,yBAFJ,EAkBKO,IAAI,CAACU,UAAL,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0B,UAAAC,IAAI,EAAI;AAE/B,WACI,MAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,IAAI,CAACC,IAAL,CAAUC;AAAtB,OACI,MAAC,KAAD,CAAO,IAAP,QACA,iBAAIF,IAAI,CAACC,IAAL,CAAUC,EAAd,CADA,CADJ,EAII,MAAC,KAAD,CAAO,IAAP,QACA;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,mBAAM;AACjClB,QAAAA,aAAa,CAAC;AACVO,UAAAA,SAAS,EAAE;AACPW,YAAAA,EAAE,EAAEF,IAAI,CAACC,IAAL,CAAUC;AADP,WADD;AAIVP,UAAAA,cAAc,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAEhB;AAAT,WAAD;AAJN,SAAD,CAAb;AAMH;AAPD,2BADA,CAJJ,CADJ;AAmBH,GArBA,CAlBL,CADJ;AA2CH;;AAED,eAAeE,UAAf","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Card, Stack } from '@shopify/polaris';\n\n\nconst CREATE_SCRIPT_TAG = gql`\n    mutation scriptTagCreate($input: ScriptTagInput!) {\n        scriptTagCreate(input: $input) {\n            scriptTag {\n                id\n            }\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\n\nconst QUERY_SCRIPTTAGS = gql`\n    query {\n        scriptTags(first: 5) {\n            edges {\n                node {\n                    id\n                    src\n                    displayScope\n                }\n            }\n        }\n    }\n`;\n\nconst DELETE_SCRIPTTAG = gql`\n    mutation scriptTagDelete($id: ID!) {\n        scriptTagDelete(id: $id) {\n            deletedScriptTagId\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\n\n\nfunction ScriptPage() {\n\n    const [createScripts] = useMutation(CREATE_SCRIPT_TAG);\n    const [deleteScripts] = useMutation(DELETE_SCRIPTTAG);\n    const { loading, error, data } = useQuery(QUERY_SCRIPTTAGS);\n\n\n    if (loading) return <div>Loadingâ€¦</div>;\n    if (error) return <div>{error.message}</div>;\n\n    console.log('this is script data', data)\n\n    return (\n        <Card>\n            <h1>These are the script tags right now:</h1>\n            <button\n                type='submit' onClick={() => {\n                    createScripts({\n                        variables: {\n                            input: {\n                                src: \"https://ad8de5a8.ngrok.io/test-script.js\",\n                                displayScope: \"ALL\"\n                            }\n                        },\n                        refetchQueries: [{ query: QUERY_SCRIPTTAGS }]\n                    })\n                }}\n            >\n                Create Script Tag\n            </button>\n\n            {data.scriptTags.edges.map(item => {\n\n                return (\n                    <Stack key={item.node.id}>\n                        <Stack.Item>\n                        <p>{item.node.id}</p>\n                        </Stack.Item>\n                        <Stack.Item>\n                        <button type='submit' onClick={() => {\n                            deleteScripts({\n                                variables: {\n                                    id: item.node.id\n                                },\n                                refetchQueries: [{ query: QUERY_SCRIPTTAGS }]\n                            })\n                        }}>\n                            Delete Script Tag\n                        </button>\n                        </Stack.Item>\n                    </Stack>\n                )\n            })}\n        </Card>\n    )\n}\n\nexport default ScriptPage;\n"]},"metadata":{},"sourceType":"module"}