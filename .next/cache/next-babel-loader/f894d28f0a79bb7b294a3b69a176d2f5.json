{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar _parseInt = require(\"@babel/runtime-corejs2/core-js/parse-int\");\n\nrequire('isomorphic-fetch');\n\nvar dotenv = require('dotenv');\n\nvar Koa = require('koa');\n\nvar KoaRouter = require('koa-router');\n\nvar next = require('next');\n\nvar _require = require('@shopify/koa-shopify-auth'),\n    createShopifyAuth = _require[\"default\"];\n\nvar _require2 = require('@shopify/koa-shopify-auth'),\n    verifyRequest = _require2.verifyRequest;\n\nvar session = require('koa-session');\n\nvar koaBody = require('koa-body');\n\ndotenv.config();\n\nvar _require3 = require('@shopify/koa-shopify-graphql-proxy'),\n    graphQLProxy = _require3[\"default\"];\n\nvar _require4 = require('@shopify/koa-shopify-graphql-proxy'),\n    ApiVersion = _require4.ApiVersion;\n\nvar port = _parseInt(process.env.PORT, 10) || 3000;\nvar dev = true;\nvar app = next({\n  dev: dev\n});\nvar handle = app.getRequestHandler();\nvar _process$env = process.env,\n    SHOPIFY_API_SECRET_KEY = _process$env.SHOPIFY_API_SECRET_KEY,\n    SHOPIFY_API_KEY = _process$env.SHOPIFY_API_KEY;\nvar server = new Koa();\nvar router = new KoaRouter();\nvar products = [{\n  'image1': 'test'\n}];\nrouter.get('/api/products', function _callee(ctx) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          try {\n            ctx.body = {\n              status: 'success',\n              data: products\n            };\n          } catch (error) {\n            console.log(error);\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n});\nrouter.post('/api/products', koaBody(), function _callee2(ctx) {\n  var body;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          try {\n            body = ctx.request.body;\n            products.push(body);\n            ctx.body = \"Item Added\";\n          } catch (error) {\n            console.log(error);\n          }\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}); // Router Middleware\n\nserver.use(router.allowedMethods());\nserver.use(router.routes());\napp.prepare().then(function () {\n  server.use(session(server));\n  server.keys = [SHOPIFY_API_SECRET_KEY];\n  server.use(createShopifyAuth({\n    apiKey: SHOPIFY_API_KEY,\n    secret: SHOPIFY_API_SECRET_KEY,\n    scopes: ['read_products', 'write_products', 'read_script_tags', 'write_script_tags'],\n    afterAuth: function afterAuth(ctx) {\n      var _ctx$session = ctx.session,\n          shop = _ctx$session.shop,\n          accessToken = _ctx$session.accessToken;\n      ctx.cookies.set('shopOrigin', shop, {\n        httpOnly: false,\n        secure: true,\n        sameSite: 'none'\n      });\n      ctx.redirect('/');\n    }\n  }));\n  server.use(graphQLProxy({\n    version: ApiVersion.October19\n  }));\n  server.use(verifyRequest());\n  server.use(function _callee3(ctx) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(handle(ctx.req, ctx.res));\n\n          case 2:\n            ctx.respond = false;\n            ctx.res.statusCode = 200;\n            return _context3.abrupt(\"return\");\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  });\n  server.listen(port, function () {\n    console.log(\"> Ready on http://localhost:\".concat(port));\n  });\n});","map":{"version":3,"sources":["/Users/iskandarkurbanov/Desktop/script-tag-app/pages/index.js"],"names":["require","dotenv","Koa","KoaRouter","next","createShopifyAuth","verifyRequest","session","koaBody","config","graphQLProxy","ApiVersion","port","process","env","PORT","dev","app","handle","getRequestHandler","SHOPIFY_API_SECRET_KEY","SHOPIFY_API_KEY","server","router","products","get","ctx","body","status","data","error","console","log","post","request","push","use","allowedMethods","routes","prepare","then","keys","apiKey","secret","scopes","afterAuth","shop","accessToken","cookies","set","httpOnly","secure","sameSite","redirect","version","October19","req","res","respond","statusCode","listen"],"mappings":"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","sourcesContent":["require('isomorphic-fetch');\nconst dotenv = require('dotenv');\nconst Koa = require('koa');\nconst KoaRouter = require('koa-router');\nconst next = require('next');\nconst { default: createShopifyAuth } = require('@shopify/koa-shopify-auth');\nconst { verifyRequest } = require('@shopify/koa-shopify-auth');\nconst session = require('koa-session');\nconst koaBody = require('koa-body');\n\n\ndotenv.config();\nconst { default: graphQLProxy } = require('@shopify/koa-shopify-graphql-proxy');\nconst { ApiVersion } = require('@shopify/koa-shopify-graphql-proxy');\n\n\nconst port = parseInt(process.env.PORT, 10) || 3000;\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\n\nconst { SHOPIFY_API_SECRET_KEY, SHOPIFY_API_KEY } = process.env;\n\nconst server = new Koa();\nconst router = new KoaRouter();\n\nconst products = [\n  {\n    'image1': 'test'\n  }\n];\n\nrouter.get('/api/products', async (ctx) => {\n  try {\n    ctx.body = {\n      status: 'success',\n      data: products\n    }\n  } catch (error) {\n    console.log(error)\n  }\n})\n\nrouter.post('/api/products', koaBody(), async (ctx) => {\n  try {\n    const body = ctx.request.body;\n    products.push(body);\n    ctx.body = \"Item Added\";\n  } catch (error) {\n    console.log(error)\n  }\n})\n\n// Router Middleware\nserver.use(router.allowedMethods());\nserver.use(router.routes());\n\napp.prepare().then(() => {\n  \n  \n  server.use(session(server));\n  server.keys = [SHOPIFY_API_SECRET_KEY];\n\n  server.use(\n    createShopifyAuth({\n      apiKey: SHOPIFY_API_KEY,\n      secret: SHOPIFY_API_SECRET_KEY,\n      scopes: [\n        'read_products',\n        'write_products',\n        'read_script_tags',\n        'write_script_tags'\n      ],\n      afterAuth(ctx) {\n        const { shop, accessToken } = ctx.session;\n        ctx.cookies.set('shopOrigin', shop, {\n          httpOnly: false,\n          secure: true,\n          sameSite: 'none'\n        });\n        ctx.redirect('/');\n      },\n    }),\n  );\n\n  server.use(graphQLProxy({ version: ApiVersion.October19 }))\n  server.use(verifyRequest());\n\n  \n\n  server.use(async (ctx) => {\n    await handle(ctx.req, ctx.res);\n    ctx.respond = false;\n    ctx.res.statusCode = 200;\n    return\n  });\n\n  server.listen(port, () => {\n    console.log(`> Ready on http://localhost:${port}`);\n  });\n\n});"]},"metadata":{},"sourceType":"script"}