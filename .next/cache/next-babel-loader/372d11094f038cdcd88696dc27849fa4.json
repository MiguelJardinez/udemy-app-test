{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation scriptTagDelete($id: ID!) {\\n        scriptTagDelete(id: $id) {\\n            deletedScriptTagId\\n            userErrors {\\n                field\\n                message\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n        scriptTags(first: 5) {\\n            edges {\\n                node {\\n                    id\\n                    src\\n                    displayScope\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation scriptTagCreate($input: ScriptTagInput!) {\\n        scriptTagCreate(input: $input) {\\n            scriptTag {\\n                id\\n            }\\n            userErrors {\\n                field\\n                message\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Heading, Button, Card, Page, ResourceList, Stack, TextStyle } from '@shopify/polaris';\nvar CREATE_SCRIPT_TAG = gql(_templateObject());\nvar QUERY_SCRIPTTAGS = gql(_templateObject2());\nvar DELETE_SCRIPTTAG = gql(_templateObject3());\n\nfunction ScriptPage() {\n  var _useMutation = useMutation(CREATE_SCRIPT_TAG),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createScripts = _useMutation2[0];\n\n  var _useMutation3 = useMutation(DELETE_SCRIPTTAG),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      deleteScripts = _useMutation4[0];\n\n  var _useQuery = useQuery(QUERY_SCRIPTTAGS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n  if (error) return __jsx(\"div\", null, error.message);\n  return __jsx(Page, null, __jsx(Card, null, __jsx(Heading, null, \"These are the script tags right now:\"), __jsx(Button, {\n    primary: true,\n    type: \"submit\",\n    onClick: function onClick() {\n      createScripts({\n        variables: {\n          input: {\n            src: \"https://ad8de5a8.ngrok.io/test-script.js\",\n            displayScope: \"ALL\"\n          }\n        },\n        refetchQueries: [{\n          query: QUERY_SCRIPTTAGS\n        }]\n      });\n    }\n  }, \"Create Script Tag\")), __jsx(Card, null, __jsx(ResourceList, {\n    showHeader: true,\n    resourceName: {\n      singular: 'Script',\n      plural: 'Scripts'\n    },\n    items: data.scriptTags.edges,\n    renderItem: function renderItem(item) {\n      return __jsx(ResourceList.Item, {\n        id: item.id\n      }, __jsx(Stack, null, __jsx(Stack.Item, null, __jsx(\"p\", null, item.node.id)), __jsx(Stack.Item, null, __jsx(Button, {\n        type: \"submit\",\n        onClick: function onClick() {\n          deleteScripts({\n            variables: {\n              id: item.node.id\n            },\n            refetchQueries: [{\n              query: QUERY_SCRIPTTAGS\n            }]\n          });\n        }\n      }, \"Delete Script Tag\"))));\n    }\n  })));\n}\n\nexport default ScriptPage;","map":{"version":3,"sources":["/Users/iskandarkurbanov/Desktop/script-tag-app/pages/script-page.js"],"names":["gql","useQuery","useMutation","Heading","Button","Card","Page","ResourceList","Stack","TextStyle","CREATE_SCRIPT_TAG","QUERY_SCRIPTTAGS","DELETE_SCRIPTTAG","ScriptPage","createScripts","deleteScripts","loading","error","data","message","variables","input","src","displayScope","refetchQueries","query","singular","plural","scriptTags","edges","item","id","node"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,YAAtC,EAAoDC,KAApD,EAA2DC,SAA3D,QAA4E,kBAA5E;AAGA,IAAMC,iBAAiB,GAAGV,GAAH,mBAAvB;AAcA,IAAMW,gBAAgB,GAAGX,GAAH,oBAAtB;AAcA,IAAMY,gBAAgB,GAAGZ,GAAH,oBAAtB;;AAaA,SAASa,UAAT,GAAsB;AAAA,qBAEIX,WAAW,CAACQ,iBAAD,CAFf;AAAA;AAAA,MAEbI,aAFa;;AAAA,sBAGIZ,WAAW,CAACU,gBAAD,CAHf;AAAA;AAAA,MAGbG,aAHa;;AAAA,kBAIad,QAAQ,CAACU,gBAAD,CAJrB;AAAA,MAIZK,OAJY,aAIZA,OAJY;AAAA,MAIHC,KAJG,aAIHA,KAJG;AAAA,MAIIC,IAJJ,aAIIA,IAJJ;;AAOpB,MAAIF,OAAJ,EAAa,OAAO,mCAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACE,OAAZ,CAAP;AAEX,SACE,MAAC,IAAD,QACE,MAAC,IAAD,QACE,MAAC,OAAD,+CADF,EAEE,MAAC,MAAD;AACE,IAAA,OAAO,MADT;AAEE,IAAA,IAAI,EAAC,QAFP;AAEgB,IAAA,OAAO,EAAE,mBAAM;AAC3BL,MAAAA,aAAa,CAAC;AACZM,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAE;AACLC,YAAAA,GAAG,EAAE,0CADA;AAELC,YAAAA,YAAY,EAAE;AAFT;AADE,SADC;AAOZC,QAAAA,cAAc,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAEd;AAAT,SAAD;AAPJ,OAAD,CAAb;AASD;AAZH,yBAFF,CADF,EAoBE,MAAC,IAAD,QACE,MAAC,YAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,YAAY,EAAE;AAAEe,MAAAA,QAAQ,EAAE,QAAZ;AAAsBC,MAAAA,MAAM,EAAE;AAA9B,KAFhB;AAGE,IAAA,KAAK,EAAET,IAAI,CAACU,UAAL,CAAgBC,KAHzB;AAIE,IAAA,UAAU,EAAE,oBAAAC,IAAI,EAAI;AAClB,aACE,MAAC,YAAD,CAAc,IAAd;AACE,QAAA,EAAE,EAAEA,IAAI,CAACC;AADX,SAGE,MAAC,KAAD,QACE,MAAC,KAAD,CAAO,IAAP,QACE,iBAAID,IAAI,CAACE,IAAL,CAAUD,EAAd,CADF,CADF,EAIE,MAAC,KAAD,CAAO,IAAP,QACE,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,mBAAM;AACnChB,UAAAA,aAAa,CAAC;AACZK,YAAAA,SAAS,EAAE;AACTW,cAAAA,EAAE,EAAED,IAAI,CAACE,IAAL,CAAUD;AADL,aADC;AAIZP,YAAAA,cAAc,EAAE,CAAC;AAAEC,cAAAA,KAAK,EAAEd;AAAT,aAAD;AAJJ,WAAD,CAAb;AAMD;AAPD,6BADF,CAJF,CAHF,CADF;AAuBD;AA5BH,IADF,CApBF,CADF;AAwDD;;AAED,eAAeE,UAAf","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Heading, Button, Card, Page, ResourceList, Stack, TextStyle } from '@shopify/polaris';\n\n\nconst CREATE_SCRIPT_TAG = gql`\n    mutation scriptTagCreate($input: ScriptTagInput!) {\n        scriptTagCreate(input: $input) {\n            scriptTag {\n                id\n            }\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\n\nconst QUERY_SCRIPTTAGS = gql`\n    query {\n        scriptTags(first: 5) {\n            edges {\n                node {\n                    id\n                    src\n                    displayScope\n                }\n            }\n        }\n    }\n`;\n\nconst DELETE_SCRIPTTAG = gql`\n    mutation scriptTagDelete($id: ID!) {\n        scriptTagDelete(id: $id) {\n            deletedScriptTagId\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\n\n\nfunction ScriptPage() {\n\n  const [createScripts] = useMutation(CREATE_SCRIPT_TAG);\n  const [deleteScripts] = useMutation(DELETE_SCRIPTTAG);\n  const { loading, error, data } = useQuery(QUERY_SCRIPTTAGS);\n\n\n  if (loading) return <div>Loadingâ€¦</div>;\n  if (error) return <div>{error.message}</div>;\n\n  return (\n    <Page>\n      <Card>\n        <Heading>These are the script tags right now:</Heading>\n        <Button\n          primary\n          type='submit' onClick={() => {\n            createScripts({\n              variables: {\n                input: {\n                  src: \"https://ad8de5a8.ngrok.io/test-script.js\",\n                  displayScope: \"ALL\"\n                }\n              },\n              refetchQueries: [{ query: QUERY_SCRIPTTAGS }]\n            })\n          }}\n        >\n          Create Script Tag\n        </Button>\n      </Card>\n      <Card>\n        <ResourceList\n          showHeader\n          resourceName={{ singular: 'Script', plural: 'Scripts' }}\n          items={data.scriptTags.edges}\n          renderItem={item => {\n            return (\n              <ResourceList.Item\n                id={item.id}\n              >\n                <Stack>\n                  <Stack.Item>\n                    <p>{item.node.id}</p>\n                  </Stack.Item>\n                  <Stack.Item>\n                    <Button type='submit' onClick={() => {\n                      deleteScripts({\n                        variables: {\n                          id: item.node.id\n                        },\n                        refetchQueries: [{ query: QUERY_SCRIPTTAGS }]\n                      })\n                    }}>\n                      Delete Script Tag\n                    </Button>\n                  </Stack.Item>\n                </Stack>\n              </ResourceList.Item>\n            )\n          }}\n\n        />\n      </Card>\n    </Page>\n  )\n}\n\nexport default ScriptPage;\n"]},"metadata":{},"sourceType":"module"}