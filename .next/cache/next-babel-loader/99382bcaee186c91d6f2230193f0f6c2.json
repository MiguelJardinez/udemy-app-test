{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Heading, Button, Card, Layout, Page, ResourceList, Stack, TextStyle } from '@shopify/polaris';\nconst CREATE_SCRIPT_TAG = gql`\n    mutation scriptTagCreate($input: ScriptTagInput!) {\n        scriptTagCreate(input: $input) {\n            scriptTag {\n                id\n            }\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\nconst QUERY_SCRIPTTAGS = gql`\n    query {\n        scriptTags(first: 5) {\n            edges {\n                node {\n                    id\n                    src\n                    displayScope\n                }\n            }\n        }\n    }\n`;\nconst DELETE_SCRIPTTAG = gql`\n    mutation scriptTagDelete($id: ID!) {\n        scriptTagDelete(id: $id) {\n            deletedScriptTagId\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\n\nfunction ScriptPage() {\n  const [createScripts] = useMutation(CREATE_SCRIPT_TAG);\n  const [deleteScripts] = useMutation(DELETE_SCRIPTTAG);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(QUERY_SCRIPTTAGS);\n  if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n  if (error) return __jsx(\"div\", null, error.message);\n  return __jsx(Page, null, __jsx(\"div\", null, __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n    title: \"These are the script tags right now:\",\n    sectioned: true\n  }, __jsx(\"p\", null, \"Create or Delete a Script Tag\"))), __jsx(Layout.Section, {\n    secondary: true\n  }, __jsx(Card, {\n    title: \"Delete Tag\",\n    sectioned: true\n  }, __jsx(Button, {\n    primary: true,\n    size: \"slim\",\n    type: \"submit\",\n    onClick: () => {\n      createScripts({\n        variables: {\n          input: {\n            src: \"https://ad8de5a8.ngrok.io/test-script.js\",\n            displayScope: \"ALL\"\n          }\n        },\n        refetchQueries: [{\n          query: QUERY_SCRIPTTAGS\n        }]\n      });\n    }\n  }, \"Create Script Tag\"))))), __jsx(Card, null, __jsx(ResourceList, {\n    showHeader: true,\n    resourceName: {\n      singular: 'Script',\n      plural: 'Scripts'\n    },\n    items: data.scriptTags.edges,\n    renderItem: item => {\n      return __jsx(ResourceList.Item, {\n        id: item.id\n      }, __jsx(Stack, null, __jsx(Stack.Item, null, __jsx(\"p\", null, item.node.id)), __jsx(Stack.Item, null, __jsx(Button, {\n        type: \"submit\",\n        onClick: () => {\n          deleteScripts({\n            variables: {\n              id: item.node.id\n            },\n            refetchQueries: [{\n              query: QUERY_SCRIPTTAGS\n            }]\n          });\n        }\n      }, \"Delete Script Tag\"))));\n    }\n  })));\n}\n\nexport default ScriptPage;","map":{"version":3,"sources":["/Users/iskandarkurbanov/Desktop/script-tag-app/pages/script-page.js"],"names":["gql","useQuery","useMutation","Heading","Button","Card","Layout","Page","ResourceList","Stack","TextStyle","CREATE_SCRIPT_TAG","QUERY_SCRIPTTAGS","DELETE_SCRIPTTAG","ScriptPage","createScripts","deleteScripts","loading","error","data","message","variables","input","src","displayScope","refetchQueries","query","singular","plural","scriptTags","edges","item","id","node"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,MAAhC,EAAwCC,IAAxC,EAA8CC,YAA9C,EAA4DC,KAA5D,EAAmEC,SAAnE,QAAoF,kBAApF;AAGA,MAAMC,iBAAiB,GAAGX,GAAI;;;;;;;;;;;;CAA9B;AAcA,MAAMY,gBAAgB,GAAGZ,GAAI;;;;;;;;;;;;CAA7B;AAcA,MAAMa,gBAAgB,GAAGb,GAAI;;;;;;;;;;CAA7B;;AAaA,SAASc,UAAT,GAAsB;AAEpB,QAAM,CAACC,aAAD,IAAkBb,WAAW,CAACS,iBAAD,CAAnC;AACA,QAAM,CAACK,aAAD,IAAkBd,WAAW,CAACW,gBAAD,CAAnC;AACA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BlB,QAAQ,CAACW,gBAAD,CAAzC;AAGA,MAAIK,OAAJ,EAAa,OAAO,mCAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACE,OAAZ,CAAP;AAEX,SACE,MAAC,IAAD,QACE,mBACA,MAAC,MAAD,QACE,MAAC,MAAD,CAAQ,OAAR,QACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,sCAAZ;AAAmD,IAAA,SAAS;AAA5D,KACE,iDADF,CADF,CADF,EAME,MAAC,MAAD,CAAQ,OAAR;AAAgB,IAAA,SAAS;AAAzB,KACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,YAAZ;AAAyB,IAAA,SAAS;AAAlC,KACE,MAAC,MAAD;AACE,IAAA,OAAO,MADT;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,IAAI,EAAC,QAHP;AAGgB,IAAA,OAAO,EAAE,MAAM;AAC3BL,MAAAA,aAAa,CAAC;AACZM,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAE;AACLC,YAAAA,GAAG,EAAE,0CADA;AAELC,YAAAA,YAAY,EAAE;AAFT;AADE,SADC;AAOZC,QAAAA,cAAc,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAEd;AAAT,SAAD;AAPJ,OAAD,CAAb;AASD;AAbH,yBADF,CADF,CANF,CADA,CADF,EA+BE,MAAC,IAAD,QACE,MAAC,YAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,YAAY,EAAE;AAAEe,MAAAA,QAAQ,EAAE,QAAZ;AAAsBC,MAAAA,MAAM,EAAE;AAA9B,KAFhB;AAGE,IAAA,KAAK,EAAET,IAAI,CAACU,UAAL,CAAgBC,KAHzB;AAIE,IAAA,UAAU,EAAEC,IAAI,IAAI;AAClB,aACE,MAAC,YAAD,CAAc,IAAd;AACE,QAAA,EAAE,EAAEA,IAAI,CAACC;AADX,SAGE,MAAC,KAAD,QACE,MAAC,KAAD,CAAO,IAAP,QACE,iBAAID,IAAI,CAACE,IAAL,CAAUD,EAAd,CADF,CADF,EAIE,MAAC,KAAD,CAAO,IAAP,QACE,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,MAAM;AACnChB,UAAAA,aAAa,CAAC;AACZK,YAAAA,SAAS,EAAE;AACTW,cAAAA,EAAE,EAAED,IAAI,CAACE,IAAL,CAAUD;AADL,aADC;AAIZP,YAAAA,cAAc,EAAE,CAAC;AAAEC,cAAAA,KAAK,EAAEd;AAAT,aAAD;AAJJ,WAAD,CAAb;AAMD;AAPD,6BADF,CAJF,CAHF,CADF;AAuBD;AA5BH,IADF,CA/BF,CADF;AAmED;;AAED,eAAeE,UAAf","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Heading, Button, Card, Layout, Page, ResourceList, Stack, TextStyle } from '@shopify/polaris';\n\n\nconst CREATE_SCRIPT_TAG = gql`\n    mutation scriptTagCreate($input: ScriptTagInput!) {\n        scriptTagCreate(input: $input) {\n            scriptTag {\n                id\n            }\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\n\nconst QUERY_SCRIPTTAGS = gql`\n    query {\n        scriptTags(first: 5) {\n            edges {\n                node {\n                    id\n                    src\n                    displayScope\n                }\n            }\n        }\n    }\n`;\n\nconst DELETE_SCRIPTTAG = gql`\n    mutation scriptTagDelete($id: ID!) {\n        scriptTagDelete(id: $id) {\n            deletedScriptTagId\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\n\n\nfunction ScriptPage() {\n\n  const [createScripts] = useMutation(CREATE_SCRIPT_TAG);\n  const [deleteScripts] = useMutation(DELETE_SCRIPTTAG);\n  const { loading, error, data } = useQuery(QUERY_SCRIPTTAGS);\n\n\n  if (loading) return <div>Loadingâ€¦</div>;\n  if (error) return <div>{error.message}</div>;\n\n  return (\n    <Page>\n      <div>\n      <Layout>\n        <Layout.Section>\n          <Card title=\"These are the script tags right now:\" sectioned>\n            <p>Create or Delete a Script Tag</p>\n          </Card>\n        </Layout.Section>\n        <Layout.Section secondary>\n          <Card title=\"Delete Tag\" sectioned>\n            <Button\n              primary\n              size=\"slim\"\n              type='submit' onClick={() => {\n                createScripts({\n                  variables: {\n                    input: {\n                      src: \"https://ad8de5a8.ngrok.io/test-script.js\",\n                      displayScope: \"ALL\"\n                    }\n                  },\n                  refetchQueries: [{ query: QUERY_SCRIPTTAGS }]\n                })\n              }}\n            >\n              Create Script Tag\n            </Button>\n          </Card>\n        </Layout.Section>\n      </Layout>\n      </div>\n      <Card>\n        <ResourceList\n          showHeader\n          resourceName={{ singular: 'Script', plural: 'Scripts' }}\n          items={data.scriptTags.edges}\n          renderItem={item => {\n            return (\n              <ResourceList.Item\n                id={item.id}\n              >\n                <Stack>\n                  <Stack.Item>\n                    <p>{item.node.id}</p>\n                  </Stack.Item>\n                  <Stack.Item>\n                    <Button type='submit' onClick={() => {\n                      deleteScripts({\n                        variables: {\n                          id: item.node.id\n                        },\n                        refetchQueries: [{ query: QUERY_SCRIPTTAGS }]\n                      })\n                    }}>\n                      Delete Script Tag\n                    </Button>\n                  </Stack.Item>\n                </Stack>\n              </ResourceList.Item>\n            )\n          }}\n\n        />\n      </Card>\n    </Page>\n  )\n}\n\nexport default ScriptPage;\n"]},"metadata":{},"sourceType":"module"}