{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getProducts($ids: [ID!]!) {\\n    nodes(ids: $ids) {\\n      ... on Product {\\n        title\\n        handle\\n        descriptionHtml\\n        id\\n        images(first: 1) {\\n          edges {\\n            node {\\n              originalSrc\\n              altText\\n            }\\n          }\\n        }\\n        variants(first: 1) {\\n          edges {\\n            node {\\n              price\\n              id\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag'; // import { useQuery } from '@apollo/react-hooks';\n\nimport { Query } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());\n\nfunction ProductList() {\n  // const { loading, error, data } = useQuery(GET_PRODUCTS_BY_ID, { variables: { ids: store.get('ids') } })\n  // if (loading) return <div>Loading...</div>;\n  // if (error) return <div>{error.message}</div>;\n  // console.log('data', data)\n  return __jsx(Query, {\n    query: GET_PRODUCTS_BY_ID,\n    variables: {\n      ids: store.get('ids')\n    }\n  }, function (_ref) {\n    var data = _ref.data,\n        loading = _ref.loading,\n        error = _ref.error;\n    if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n    if (error) return __jsx(\"div\", null, error.message);\n    console.log(data);\n    return __jsx(Card, null, __jsx(ResourceList, {\n      showHeader: true,\n      resourceName: {\n        singular: 'Product',\n        plural: 'Products'\n      },\n      items: data.nodes,\n      renderItem: function renderItem(item) {\n        var media = __jsx(Thumbnail, {\n          source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : '',\n          alt: item.images.edges[0] ? item.images.edges[0].node.altText : ''\n        });\n\n        var price = item.variants.edges[0].node.price;\n        return __jsx(ResourceList.Item, {\n          id: item.id,\n          media: media,\n          accessibilityLabel: \"View details for \".concat(item.title),\n          onClick: function onClick() {\n            store.set('item', item);\n          }\n        }, __jsx(Stack, null, __jsx(Stack.Item, {\n          fill: true\n        }, __jsx(\"h3\", null, __jsx(TextStyle, {\n          variation: \"strong\"\n        }, item.title))), __jsx(Stack.Item, null, __jsx(\"p\", null, \"$\", price))));\n      }\n    }));\n  });\n}\n\nexport default ProductList;","map":{"version":3,"sources":["/Users/iskandarkurbanov/Desktop/script-tag-app/components/ProductList.js"],"names":["gql","Query","Card","ResourceList","Stack","TextStyle","Thumbnail","store","GET_PRODUCTS_BY_ID","ProductList","ids","get","data","loading","error","message","console","log","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","id","title","set"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB,C,CACA;;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,IAAT,EAAeC,YAAf,EAA6BC,KAA7B,EAAoCC,SAApC,EAA+CC,SAA/C,QAAgE,kBAAhE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAMC,kBAAkB,GAAGR,GAAH,mBAAxB;;AA6BA,SAASS,WAAT,GAAuB;AAEnB;AAEA;AACA;AAEA;AAEA,SACI,MAAC,KAAD;AAAO,IAAA,KAAK,EAAED,kBAAd;AAAkC,IAAA,SAAS,EAAE;AAAEE,MAAAA,GAAG,EAAEH,KAAK,CAACI,GAAN,CAAU,KAAV;AAAP;AAA7C,KACK,gBAA8B;AAAA,QAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,QAArBC,OAAqB,QAArBA,OAAqB;AAAA,QAAZC,KAAY,QAAZA,KAAY;AAC3B,QAAID,OAAJ,EAAa,OAAO,mCAAP;AACb,QAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACC,OAAZ,CAAP;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,WACI,MAAC,IAAD,QACI,MAAC,YAAD;AACI,MAAA,UAAU,MADd;AAEI,MAAA,YAAY,EAAE;AAAEM,QAAAA,QAAQ,EAAE,SAAZ;AAAuBC,QAAAA,MAAM,EAAE;AAA/B,OAFlB;AAGI,MAAA,KAAK,EAAEP,IAAI,CAACQ,KAHhB;AAII,MAAA,UAAU,EAAE,oBAAAC,IAAI,EAAI;AAChB,YAAMC,KAAK,GACP,MAAC,SAAD;AACI,UAAA,MAAM,EACFD,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IACMH,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqBC,IAArB,CAA0BC,WADhC,GAEM,EAJd;AAMI,UAAA,GAAG,EACCL,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IACMH,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqBC,IAArB,CAA0BE,OADhC,GAEM;AATd,UADJ;;AAcA,YAAMC,KAAK,GAAGP,IAAI,CAACQ,QAAL,CAAcL,KAAd,CAAoB,CAApB,EAAuBC,IAAvB,CAA4BG,KAA1C;AACA,eACI,MAAC,YAAD,CAAc,IAAd;AACI,UAAA,EAAE,EAAEP,IAAI,CAACS,EADb;AAEI,UAAA,KAAK,EAAER,KAFX;AAGI,UAAA,kBAAkB,6BAAsBD,IAAI,CAACU,KAA3B,CAHtB;AAII,UAAA,OAAO,EAAE,mBAAM;AACXxB,YAAAA,KAAK,CAACyB,GAAN,CAAU,MAAV,EAAkBX,IAAlB;AACH;AANL,WAQI,MAAC,KAAD,QACI,MAAC,KAAD,CAAO,IAAP;AAAY,UAAA,IAAI;AAAhB,WACI,kBACI,MAAC,SAAD;AAAW,UAAA,SAAS,EAAC;AAArB,WACKA,IAAI,CAACU,KADV,CADJ,CADJ,CADJ,EAQI,MAAC,KAAD,CAAO,IAAP,QACI,sBAAKH,KAAL,CADJ,CARJ,CARJ,CADJ;AAuBH;AA3CL,MADJ,CADJ;AAiDH,GAtDL,CADJ;AA0DH;;AAED,eAAenB,WAAf","sourcesContent":["import gql from 'graphql-tag';\n// import { useQuery } from '@apollo/react-hooks';\nimport { Query } from 'react-apollo'\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ProductList() {\n\n    // const { loading, error, data } = useQuery(GET_PRODUCTS_BY_ID, { variables: { ids: store.get('ids') } })\n\n    // if (loading) return <div>Loading...</div>;\n    // if (error) return <div>{error.message}</div>;\n\n    // console.log('data', data)\n\n    return (\n        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids') }}>\n            {({ data, loading, error }) => {\n                if (loading) return <div>Loadingâ€¦</div>;\n                if (error) return <div>{error.message}</div>;\n                console.log(data);\n                return (\n                    <Card>\n                        <ResourceList\n                            showHeader\n                            resourceName={{ singular: 'Product', plural: 'Products' }}\n                            items={data.nodes}\n                            renderItem={item => {\n                                const media = (\n                                    <Thumbnail\n                                        source={\n                                            item.images.edges[0]\n                                                ? item.images.edges[0].node.originalSrc\n                                                : ''\n                                        }\n                                        alt={\n                                            item.images.edges[0]\n                                                ? item.images.edges[0].node.altText\n                                                : ''\n                                        }\n                                    />\n                                );\n                                const price = item.variants.edges[0].node.price;\n                                return (\n                                    <ResourceList.Item\n                                        id={item.id}\n                                        media={media}\n                                        accessibilityLabel={`View details for ${item.title}`}\n                                        onClick={() => {\n                                            store.set('item', item);\n                                        }}\n                                    >\n                                        <Stack>\n                                            <Stack.Item fill>\n                                                <h3>\n                                                    <TextStyle variation=\"strong\">\n                                                        {item.title}\n                                                    </TextStyle>\n                                                </h3>\n                                            </Stack.Item>\n                                            <Stack.Item>\n                                                <p>${price}</p>\n                                            </Stack.Item>\n                                        </Stack>\n                                    </ResourceList.Item>\n                                );\n                            }}\n                        />\n                    </Card>\n                );\n            }}\n        </Query>\n    )\n}\n\nexport default ProductList;"]},"metadata":{},"sourceType":"module"}