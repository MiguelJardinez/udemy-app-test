{"ast":null,"code":"require('isomorphic-fetch');\n\nconst dotenv = require('dotenv');\n\nconst Koa = require('koa');\n\nconst KoaRouter = require('koa-router');\n\nconst next = require('next');\n\nconst {\n  default: createShopifyAuth\n} = require('@shopify/koa-shopify-auth');\n\nconst {\n  verifyRequest\n} = require('@shopify/koa-shopify-auth');\n\nconst session = require('koa-session');\n\nconst koaBody = require('koa-body');\n\ndotenv.config();\n\nconst {\n  default: graphQLProxy\n} = require('@shopify/koa-shopify-graphql-proxy');\n\nconst {\n  ApiVersion\n} = require('@shopify/koa-shopify-graphql-proxy');\n\nconst port = parseInt(process.env.PORT, 10) || 3000;\nconst dev = true;\nconst app = next({\n  dev\n});\nconst handle = app.getRequestHandler();\nconst {\n  SHOPIFY_API_SECRET_KEY,\n  SHOPIFY_API_KEY\n} = process.env;\nconst server = new Koa();\nconst router = new KoaRouter();\nconst products = [{\n  'image1': 'test'\n}];\nrouter.get('/api/products', async ctx => {\n  try {\n    ctx.body = {\n      status: 'success',\n      data: products\n    };\n  } catch (error) {\n    console.log(error);\n  }\n});\nrouter.post('/api/products', koaBody(), async ctx => {\n  try {\n    const body = ctx.request.body;\n    products.push(body);\n    ctx.body = \"Item Added\";\n  } catch (error) {\n    console.log(error);\n  }\n}); // Router Middleware\n\nserver.use(router.allowedMethods());\nserver.use(router.routes());\napp.prepare().then(() => {\n  server.use(session(server));\n  server.keys = [SHOPIFY_API_SECRET_KEY];\n  server.use(createShopifyAuth({\n    apiKey: SHOPIFY_API_KEY,\n    secret: SHOPIFY_API_SECRET_KEY,\n    scopes: ['read_products', 'write_products', 'read_script_tags', 'write_script_tags'],\n\n    afterAuth(ctx) {\n      const {\n        shop,\n        accessToken\n      } = ctx.session;\n      ctx.cookies.set('shopOrigin', shop, {\n        httpOnly: false,\n        secure: true,\n        sameSite: 'none'\n      });\n      ctx.redirect('/');\n    }\n\n  }));\n  server.use(graphQLProxy({\n    version: ApiVersion.October19\n  }));\n  server.use(verifyRequest());\n  server.use(async ctx => {\n    await handle(ctx.req, ctx.res);\n    ctx.respond = false;\n    ctx.res.statusCode = 200;\n    return;\n  });\n  server.listen(port, () => {\n    console.log(`> Ready on http://localhost:${port}`);\n  });\n});","map":{"version":3,"sources":["/Users/iskandarkurbanov/Desktop/script-tag-app/pages/index.js"],"names":["require","dotenv","Koa","KoaRouter","next","default","createShopifyAuth","verifyRequest","session","koaBody","config","graphQLProxy","ApiVersion","port","parseInt","process","env","PORT","dev","app","handle","getRequestHandler","SHOPIFY_API_SECRET_KEY","SHOPIFY_API_KEY","server","router","products","get","ctx","body","status","data","error","console","log","post","request","push","use","allowedMethods","routes","prepare","then","keys","apiKey","secret","scopes","afterAuth","shop","accessToken","cookies","set","httpOnly","secure","sameSite","redirect","version","October19","req","res","respond","statusCode","listen"],"mappings":"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","sourcesContent":["require('isomorphic-fetch');\nconst dotenv = require('dotenv');\nconst Koa = require('koa');\nconst KoaRouter = require('koa-router');\nconst next = require('next');\nconst { default: createShopifyAuth } = require('@shopify/koa-shopify-auth');\nconst { verifyRequest } = require('@shopify/koa-shopify-auth');\nconst session = require('koa-session');\nconst koaBody = require('koa-body');\n\n\ndotenv.config();\nconst { default: graphQLProxy } = require('@shopify/koa-shopify-graphql-proxy');\nconst { ApiVersion } = require('@shopify/koa-shopify-graphql-proxy');\n\n\nconst port = parseInt(process.env.PORT, 10) || 3000;\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\n\nconst { SHOPIFY_API_SECRET_KEY, SHOPIFY_API_KEY } = process.env;\n\nconst server = new Koa();\nconst router = new KoaRouter();\n\nconst products = [\n  {\n    'image1': 'test'\n  }\n];\n\nrouter.get('/api/products', async (ctx) => {\n  try {\n    ctx.body = {\n      status: 'success',\n      data: products\n    }\n  } catch (error) {\n    console.log(error)\n  }\n})\n\nrouter.post('/api/products', koaBody(), async (ctx) => {\n  try {\n    const body = ctx.request.body;\n    products.push(body);\n    ctx.body = \"Item Added\";\n  } catch (error) {\n    console.log(error)\n  }\n})\n\n// Router Middleware\nserver.use(router.allowedMethods());\nserver.use(router.routes());\n\napp.prepare().then(() => {\n  \n  \n  server.use(session(server));\n  server.keys = [SHOPIFY_API_SECRET_KEY];\n\n  server.use(\n    createShopifyAuth({\n      apiKey: SHOPIFY_API_KEY,\n      secret: SHOPIFY_API_SECRET_KEY,\n      scopes: [\n        'read_products',\n        'write_products',\n        'read_script_tags',\n        'write_script_tags'\n      ],\n      afterAuth(ctx) {\n        const { shop, accessToken } = ctx.session;\n        ctx.cookies.set('shopOrigin', shop, {\n          httpOnly: false,\n          secure: true,\n          sameSite: 'none'\n        });\n        ctx.redirect('/');\n      },\n    }),\n  );\n\n  server.use(graphQLProxy({ version: ApiVersion.October19 }))\n  server.use(verifyRequest());\n\n  \n\n  server.use(async (ctx) => {\n    await handle(ctx.req, ctx.res);\n    ctx.respond = false;\n    ctx.res.statusCode = 200;\n    return\n  });\n\n  server.listen(port, () => {\n    console.log(`> Ready on http://localhost:${port}`);\n  });\n\n});"]},"metadata":{},"sourceType":"script"}